// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package github_organizations is a generated GoMock package.
package github_organizations

import (
	context "context"
	reflect "reflect"

	models "github.com/communitybridge/easycla/cla-backend-go/gen/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddGithubOrganization mocks base method
func (m *MockRepository) AddGithubOrganization(ctx context.Context, parentProjectSFID, projectSFID string, input *models.CreateGithubOrganization) (*models.GithubOrganization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGithubOrganization", ctx, parentProjectSFID, projectSFID, input)
	ret0, _ := ret[0].(*models.GithubOrganization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGithubOrganization indicates an expected call of AddGithubOrganization
func (mr *MockRepositoryMockRecorder) AddGithubOrganization(ctx, parentProjectSFID, projectSFID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGithubOrganization", reflect.TypeOf((*MockRepository)(nil).AddGithubOrganization), ctx, parentProjectSFID, projectSFID, input)
}

// GetGithubOrganizations mocks base method
func (m *MockRepository) GetGithubOrganizations(ctx context.Context, projectSFID string) (*models.GithubOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubOrganizations", ctx, projectSFID)
	ret0, _ := ret[0].(*models.GithubOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganizations indicates an expected call of GetGithubOrganizations
func (mr *MockRepositoryMockRecorder) GetGithubOrganizations(ctx, projectSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubOrganizations", reflect.TypeOf((*MockRepository)(nil).GetGithubOrganizations), ctx, projectSFID)
}

// GetGithubOrganizationsByParent mocks base method
func (m *MockRepository) GetGithubOrganizationsByParent(ctx context.Context, parentProjectSFID string) (*models.GithubOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubOrganizationsByParent", ctx, parentProjectSFID)
	ret0, _ := ret[0].(*models.GithubOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganizationsByParent indicates an expected call of GetGithubOrganizationsByParent
func (mr *MockRepositoryMockRecorder) GetGithubOrganizationsByParent(ctx, parentProjectSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubOrganizationsByParent", reflect.TypeOf((*MockRepository)(nil).GetGithubOrganizationsByParent), ctx, parentProjectSFID)
}

// GetGithubOrganization mocks base method
func (m *MockRepository) GetGithubOrganization(ctx context.Context, githubOrganizationName string) (*models.GithubOrganization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubOrganization", ctx, githubOrganizationName)
	ret0, _ := ret[0].(*models.GithubOrganization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganization indicates an expected call of GetGithubOrganization
func (mr *MockRepositoryMockRecorder) GetGithubOrganization(ctx, githubOrganizationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubOrganization", reflect.TypeOf((*MockRepository)(nil).GetGithubOrganization), ctx, githubOrganizationName)
}

// GetGithubOrganizationByName mocks base method
func (m *MockRepository) GetGithubOrganizationByName(ctx context.Context, githubOrganizationName string) (*models.GithubOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubOrganizationByName", ctx, githubOrganizationName)
	ret0, _ := ret[0].(*models.GithubOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganizationByName indicates an expected call of GetGithubOrganizationByName
func (mr *MockRepositoryMockRecorder) GetGithubOrganizationByName(ctx, githubOrganizationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubOrganizationByName", reflect.TypeOf((*MockRepository)(nil).GetGithubOrganizationByName), ctx, githubOrganizationName)
}

// UpdateGithubOrganization mocks base method
func (m *MockRepository) UpdateGithubOrganization(ctx context.Context, projectSFID, organizationName string, autoEnabled, branchProtectionEnabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGithubOrganization", ctx, projectSFID, organizationName, autoEnabled, branchProtectionEnabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGithubOrganization indicates an expected call of UpdateGithubOrganization
func (mr *MockRepositoryMockRecorder) UpdateGithubOrganization(ctx, projectSFID, organizationName, autoEnabled, branchProtectionEnabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGithubOrganization", reflect.TypeOf((*MockRepository)(nil).UpdateGithubOrganization), ctx, projectSFID, organizationName, autoEnabled, branchProtectionEnabled)
}

// DeleteGithubOrganization mocks base method
func (m *MockRepository) DeleteGithubOrganization(ctx context.Context, projectSFID, githubOrgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGithubOrganization", ctx, projectSFID, githubOrgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGithubOrganization indicates an expected call of DeleteGithubOrganization
func (mr *MockRepositoryMockRecorder) DeleteGithubOrganization(ctx, projectSFID, githubOrgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGithubOrganization", reflect.TypeOf((*MockRepository)(nil).DeleteGithubOrganization), ctx, projectSFID, githubOrgName)
}

// DeleteGithubOrganizationByParent mocks base method
func (m *MockRepository) DeleteGithubOrganizationByParent(ctx context.Context, parentProjectSFID, githubOrgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGithubOrganizationByParent", ctx, parentProjectSFID, githubOrgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGithubOrganizationByParent indicates an expected call of DeleteGithubOrganizationByParent
func (mr *MockRepositoryMockRecorder) DeleteGithubOrganizationByParent(ctx, parentProjectSFID, githubOrgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGithubOrganizationByParent", reflect.TypeOf((*MockRepository)(nil).DeleteGithubOrganizationByParent), ctx, parentProjectSFID, githubOrgName)
}
