// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package projects_cla_groups is a generated GoMock package.
package projects_cla_groups

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetClaGroupIDForProject mocks base method
func (m *MockRepository) GetClaGroupIDForProject(projectSFID string) (*ProjectClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupIDForProject", projectSFID)
	ret0, _ := ret[0].(*ProjectClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupIDForProject indicates an expected call of GetClaGroupIDForProject
func (mr *MockRepositoryMockRecorder) GetClaGroupIDForProject(projectSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupIDForProject", reflect.TypeOf((*MockRepository)(nil).GetClaGroupIDForProject), projectSFID)
}

// GetProjectsIdsForClaGroup mocks base method
func (m *MockRepository) GetProjectsIdsForClaGroup(claGroupID string) ([]*ProjectClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsIdsForClaGroup", claGroupID)
	ret0, _ := ret[0].([]*ProjectClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsIdsForClaGroup indicates an expected call of GetProjectsIdsForClaGroup
func (mr *MockRepositoryMockRecorder) GetProjectsIdsForClaGroup(claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsIdsForClaGroup", reflect.TypeOf((*MockRepository)(nil).GetProjectsIdsForClaGroup), claGroupID)
}

// GetProjectsIdsForFoundation mocks base method
func (m *MockRepository) GetProjectsIdsForFoundation(foundationSFID string) ([]*ProjectClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsIdsForFoundation", foundationSFID)
	ret0, _ := ret[0].([]*ProjectClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsIdsForFoundation indicates an expected call of GetProjectsIdsForFoundation
func (mr *MockRepositoryMockRecorder) GetProjectsIdsForFoundation(foundationSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsIdsForFoundation", reflect.TypeOf((*MockRepository)(nil).GetProjectsIdsForFoundation), foundationSFID)
}

// GetProjectsIdsForAllFoundation mocks base method
func (m *MockRepository) GetProjectsIdsForAllFoundation() ([]*ProjectClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsIdsForAllFoundation")
	ret0, _ := ret[0].([]*ProjectClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsIdsForAllFoundation indicates an expected call of GetProjectsIdsForAllFoundation
func (mr *MockRepositoryMockRecorder) GetProjectsIdsForAllFoundation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsIdsForAllFoundation", reflect.TypeOf((*MockRepository)(nil).GetProjectsIdsForAllFoundation))
}

// AssociateClaGroupWithProject mocks base method
func (m *MockRepository) AssociateClaGroupWithProject(claGroupID, projectSFID, foundationSFID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateClaGroupWithProject", claGroupID, projectSFID, foundationSFID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateClaGroupWithProject indicates an expected call of AssociateClaGroupWithProject
func (mr *MockRepositoryMockRecorder) AssociateClaGroupWithProject(claGroupID, projectSFID, foundationSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateClaGroupWithProject", reflect.TypeOf((*MockRepository)(nil).AssociateClaGroupWithProject), claGroupID, projectSFID, foundationSFID)
}

// RemoveProjectAssociatedWithClaGroup mocks base method
func (m *MockRepository) RemoveProjectAssociatedWithClaGroup(claGroupID string, projectSFIDList []string, all bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProjectAssociatedWithClaGroup", claGroupID, projectSFIDList, all)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProjectAssociatedWithClaGroup indicates an expected call of RemoveProjectAssociatedWithClaGroup
func (mr *MockRepositoryMockRecorder) RemoveProjectAssociatedWithClaGroup(claGroupID, projectSFIDList, all interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProjectAssociatedWithClaGroup", reflect.TypeOf((*MockRepository)(nil).RemoveProjectAssociatedWithClaGroup), claGroupID, projectSFIDList, all)
}

// GetCLAGroupNameByID mocks base method
func (m *MockRepository) GetCLAGroupNameByID(claGroupID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCLAGroupNameByID", claGroupID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCLAGroupNameByID indicates an expected call of GetCLAGroupNameByID
func (mr *MockRepositoryMockRecorder) GetCLAGroupNameByID(claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCLAGroupNameByID", reflect.TypeOf((*MockRepository)(nil).GetCLAGroupNameByID), claGroupID)
}

// GetCLAGroup mocks base method
func (m *MockRepository) GetCLAGroup(claGroupID string) (*ProjectClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCLAGroup", claGroupID)
	ret0, _ := ret[0].(*ProjectClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCLAGroup indicates an expected call of GetCLAGroup
func (mr *MockRepositoryMockRecorder) GetCLAGroup(claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCLAGroup", reflect.TypeOf((*MockRepository)(nil).GetCLAGroup), claGroupID)
}

// IsExistingFoundationLevelCLAGroup mocks base method
func (m *MockRepository) IsExistingFoundationLevelCLAGroup(foundationSFID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistingFoundationLevelCLAGroup", foundationSFID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistingFoundationLevelCLAGroup indicates an expected call of IsExistingFoundationLevelCLAGroup
func (mr *MockRepositoryMockRecorder) IsExistingFoundationLevelCLAGroup(foundationSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistingFoundationLevelCLAGroup", reflect.TypeOf((*MockRepository)(nil).IsExistingFoundationLevelCLAGroup), foundationSFID)
}

// IsAssociated mocks base method
func (m *MockRepository) IsAssociated(projectSFID, claGroupID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAssociated", projectSFID, claGroupID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAssociated indicates an expected call of IsAssociated
func (mr *MockRepositoryMockRecorder) IsAssociated(projectSFID, claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAssociated", reflect.TypeOf((*MockRepository)(nil).IsAssociated), projectSFID, claGroupID)
}

// UpdateRepositoriesCount mocks base method
func (m *MockRepository) UpdateRepositoriesCount(projectSFID string, diff int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoriesCount", projectSFID, diff)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepositoriesCount indicates an expected call of UpdateRepositoriesCount
func (mr *MockRepositoryMockRecorder) UpdateRepositoriesCount(projectSFID, diff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoriesCount", reflect.TypeOf((*MockRepository)(nil).UpdateRepositoriesCount), projectSFID, diff)
}
